
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users Collection
    // Each user document is identified by their Firebase Auth UID.
    match /users/{userId} {
      // Allow a user to read their own profile.
      allow read: if request.auth != null && request.auth.uid == userId;

      // Allow a user to create their own profile document upon signup.
      // Ensures the document ID matches the authenticated user's UID.
      allow create: if request.auth != null && request.auth.uid == userId;

      // Allow a user to update their own profile.
      // Prevents changing immutable fields like id, email, or createdAt.
      // Allows changes to mutable fields like fullName, photoURL, notificationPreferences.
      allow update: if request.auth != null &&
                       request.auth.uid == userId &&
                       // Ensure 'id' is not being changed if it's part of the update
                       !( 'id' in request.resource.data && request.resource.data.id != resource.data.id ) &&
                       // Ensure 'email' is not being changed if it's part of the update
                       !( 'email' in request.resource.data && request.resource.data.email != resource.data.email ) &&
                       // Ensure 'createdAt' is not being changed if it's part of the update
                       !( 'createdAt' in request.resource.data && request.resource.data.createdAt != resource.data.createdAt );
      
      // Generally, profiles are not deleted by users themselves.
      // Add allow delete rule if needed, with appropriate conditions.
      allow delete: if false; // Or implement specific admin/user deletion logic
    }

    // Accounts Collection
    // Transactions are linked to an accountId and a userId.
    match /accounts/{accountId} {
      // Allow read, write, update, delete only if the user is authenticated
      // and the userId in the document matches the authenticated user's UID.
      allow read, write, update, delete: if request.auth != null &&
                           'userId' in resource.data && resource.data.userId == request.auth.uid;
      // For create, check the incoming data's userId.
      allow create: if request.auth != null &&
                       'userId' in request.resource.data && request.resource.data.userId == request.auth.uid;
    }

    // Transactions Collection
    // Transactions are linked to an accountId and a userId.
    match /transactions/{transactionId} {
      // Allow read, write, update, delete only if the user is authenticated
      // and the userId in the document matches the authenticated user's UID.
      allow read, write, update, delete: if request.auth != null &&
                           'userId' in resource.data && resource.data.userId == request.auth.uid;
      // For create, check the incoming data's userId.
      allow create: if request.auth != null &&
                       'userId' in request.resource.data && request.resource.data.userId == request.auth.uid;
    }

    // Goals Collection
    // Goals are linked to a userId.
    match /goals/{goalId} {
      // Allow read, write, update, delete only if the user is authenticated
      // and the userId in the document matches the authenticated user's UID.
      allow read, write, update, delete: if request.auth != null &&
                           'userId' in resource.data && resource.data.userId == request.auth.uid;
      // For create, check the incoming data's userId.
      allow create: if request.auth != null &&
                       'userId' in request.resource.data && request.resource.data.userId == request.auth.uid;
    }
  }
}
