
"use client";

import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { useToast } from '@/hooks/use-toast';
import { generateInvestmentIdeas, type InvestmentIdeasOutput, type InvestmentIdeasInput } from '@/ai/flows/investment-ideas-flow';
import { BrainCircuit, Loader2, AlertTriangle } from 'lucide-react';
import { auth } from '@/lib/firebase';
import type { User } from 'firebase/auth';
import { onAuthStateChanged } from 'firebase/auth';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';

export default function InvestmentIdeasCard() {
  const [ideasResult, setIdeasResult] = useState<InvestmentIdeasOutput | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [isLoadingAuth, setIsLoadingAuth] = useState(true);
  const [currentUser, setCurrentUser] = useState<User | null>(null);
  const { toast } = useToast();

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      setCurrentUser(user);
      setIsLoadingAuth(false);
    });
    return () => unsubscribe();
  }, []);

  const handleGetInvestmentIdeas = async () => {
    if (!currentUser) {
      toast({
        title: 'Authentication Required',
        description: 'Please log in to generate investment ideas.',
        variant: 'destructive',
      });
      return;
    }

    setIsLoading(true);
    setIdeasResult(null);

    // Mock user inputs for now
    const mockInput: InvestmentIdeasInput = {
      riskProfile: "Moderate",
      investmentHorizon: "Long-term",
      areasOfInterest: ["Technology", "Renewable Energy"],
    };

    try {
      const result = await generateInvestmentIdeas(mockInput);
      setIdeasResult(result);
    } catch (error: any) {
      console.error('Error generating investment ideas:', error);
      toast({
        title: 'Error Generating Ideas',
        description: error.message || 'Could not generate investment ideas at this time.',
        variant: 'destructive',
      });
      setIdeasResult({ disclaimer: "Error generating ideas. This tool is for illustrative purposes only.", ideas: [] });
    } finally {
      setIsLoading(false);
    }
  };

  if (isLoadingAuth) {
    return (
      <Card className="shadow-lg hover:shadow-xl transition-shadow duration-300">
        <CardHeader>
          <div className="flex items-center gap-2">
            <BrainCircuit className="h-6 w-6 text-primary" />
            <CardTitle>AI Investment Idea Generator</CardTitle>
          </div>
          <CardDescription>
            Loading authentication state...
          </CardDescription>
        </CardHeader>
        <CardContent className="flex items-center justify-center h-[100px]">
          <Loader2 className="h-8 w-8 animate-spin text-primary" />
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="shadow-lg hover:shadow-xl transition-shadow duration-300">
      <CardHeader>
        <div className="flex items-center gap-2">
          <BrainCircuit className="h-6 w-6 text-primary" />
          <CardTitle>AI Investment Idea Generator</CardTitle>
        </div>
        <CardDescription>
          Explore hypothetical investment ideas generated by AI.
          <span className="block font-semibold text-destructive mt-1">
            FOR ILLUSTRATIVE AND EDUCATIONAL PURPOSES ONLY. NOT FINANCIAL ADVICE.
          </span>
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        {isLoading && (
          <div className="flex items-center justify-center text-muted-foreground">
            <Loader2 className="mr-2 h-5 w-5 animate-spin" />
            Generating ideas...
          </div>
        )}
        {ideasResult && ideasResult.ideas.length > 0 && !isLoading && (
          <>
            <p className="text-sm font-semibold text-destructive p-2 bg-destructive/10 rounded-md flex items-center gap-2">
              <AlertTriangle className="h-5 w-5" />
              {ideasResult.disclaimer}
            </p>
            <Accordion type="single" collapsible className="w-full">
              {ideasResult.ideas.map((idea, index) => (
                <AccordionItem value={`item-${index}`} key={idea.ideaName}>
                  <AccordionTrigger className="font-semibold text-base hover:no-underline">
                    {idea.ideaName}
                  </AccordionTrigger>
                  <AccordionContent className="space-y-2 text-sm">
                    <p><strong>Hypothetical Rationale:</strong> {idea.rationale}</p>
                    <p><strong>Mock Potential:</strong> {idea.mockPotential}</p>
                    <p><strong>Things to Consider (for further research):</strong> {idea.thingsToConsider}</p>
                  </AccordionContent>
                </AccordionItem>
              ))}
            </Accordion>
          </>
        )}
        {ideasResult && ideasResult.ideas.length === 0 && !isLoading && (
          <p className="text-sm text-muted-foreground text-center py-4">
            No investment ideas generated, or an error occurred.
          </p>
        )}
        {!ideasResult && !isLoading && (
            <p className="text-sm text-muted-foreground text-center py-4">
              {currentUser ? 'Click the button below to generate hypothetical investment ideas.' : 'Log in to generate ideas.'}
            </p>
        )}
      </CardContent>
      <CardFooter>
        <Button onClick={handleGetInvestmentIdeas} disabled={isLoading || !currentUser} className="w-full">
          {isLoading ? (
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
          ) : (
            <BrainCircuit className="mr-2 h-4 w-4" />
          )}
          {isLoading ? 'Generating...' : 'Generate Hypothetical Ideas'}
        </Button>
      </CardFooter>
    </Card>
  );
}
